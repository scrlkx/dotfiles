#!/usr/bin/env bash

set -e
[ -n "$DEBUG" ] && set -x

check_requirement() {
    if ! command -v $1 &> /dev/null; then
        echo "Ops! $2 was not found, you will have to install it and try again."
        
        if [[ "$0" = "$BASH_SOURCE" ]] then
            exit 1
        fi
    fi
}

backup() {
    if [[ -f "$1/$2" ]] then
        cp -d "$1/$2" "$3/$2"
    fi
}

config() {
    if [[ -f "$3/$2" ]] then
        rm "$3/$2"
    fi

    cp "$1/$2" "$3/$2"
}

check_recommendations() {
    MISSING=()

    for CMD in "$@"; do
        if ! command -v "$CMD" &> /dev/null; then
            MISSING+=("$CMD")
        fi
    done

    if [ ${#MISSING[@]} -gt 0 ]; then
        echo
        echo "The following recommended resources was not found. Please, consider installing them right after we are done."

        for CMD in "${MISSING[@]}"; do
            echo "- $CMD"
        done
    fi
}

echo "Starting to setup your Linux..."

USER="${USER:-$(id -u -n)}"
HOME_DIR="${HOME_DIR:-$(getent passwd $USER 2>/dev/null | cut -d: -f6)}"
FONTS_DIR="$HOME_DIR/.local/share/fonts"
BINS_DIR="$HOME_DIR/.local/bin"
SOURCE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo
echo "Please, review the information bellow."
echo "User name: ${USER}"
echo "Home folder: ${HOME_DIR}"
echo
echo "Existing configuration files will be overwritten."

echo
read -p "Continue? [y/n] " -n 1 -r
echo

if [[ ! $REPLY =~ ^[Yy]$ ]] then
    echo "Exiting..."
    
    if [[ "$0" = "$BASH_SOURCE" ]] then
        exit 1
    fi
fi

echo
echo "Checking for all requirements..."

check_requirement "curl" "curl"
check_requirement "git" "Git"
check_requirement "zsh" "ZSH"

echo "All good!"

BACKUP_FOLDER="$HOME_DIR/dotfiles_backup"

echo
echo "Backing up existent files..."

if [[ -d $BACKUP_FOLDER ]] then
    rm -r $BACKUP_FOLDER
fi

mkdir -p $BACKUP_FOLDER

backup $HOME_DIR ".aliases" $BACKUP_FOLDER
backup $HOME_DIR ".localrc" $BACKUP_FOLDER
backup $HOME_DIR ".zshrc" $BACKUP_FOLDER
backup $HOME_DIR ".gitconfig" $BACKUP_FOLDER
backup $HOME_DIR ".gitconfig.local" $BACKUP_FOLDER

echo "Saved at $BACKUP_FOLDER"

echo

echo "Setting up Shell..."
config "$SOURCE_DIR/config" ".aliases" $HOME_DIR
config "$SOURCE_DIR/config" ".localrc" $HOME_DIR

if [[ ! -d "$BINS_DIR" ]] then
    mkdir -p "$BINS_DIR"
fi

echo "Done!"

echo
echo "Setting up Antigen..."

if [[ ! -f "$HOME_DIR/antigen.zsh" ]] then
    curl -sS -L git.io/antigen > $HOME_DIR/antigen.zsh
fi

echo "Done!"

echo
echo "Setting up ZSH..."
config "$SOURCE_DIR/config" ".zshrc" $HOME_DIR
echo "Done!"

echo
echo "Setting up Powerlevel10k..."

if [[ ! -d "$HOME_DIR/powerlevel10k" ]] then
    git clone --quiet --depth=1 https://gitee.com/romkatv/powerlevel10k.git $HOME_DIR/powerlevel10k
fi

config "$SOURCE_DIR/config" ".p10k.zsh" $HOME_DIR

echo "Done!"

echo
echo "Setting up Git..."
config "$SOURCE_DIR/config" ".gitconfig" $HOME_DIR
config "$SOURCE_DIR/config" ".gitconfig.local" $HOME_DIR
echo "Done!"

echo
echo "Setting up NVM..."
    if ! command -v "nvm" &> /dev/null; then
        PROFILE=/dev/null bash -c 'curl -sS -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash > /dev/null 2>&1'
    fi
echo "Done!"

echo
echo "Setting up diff-so-fancy"
config "$SOURCE_DIR/tools" "diff-so-fancy" $BINS_DIR
echo "Done!"

echo
echo "Setting up custom fonts"
    if [[ ! -d "$FONTS_DIR" ]]; then
        mkdir "$FONTS_DIR"
    fi

    for FONT_FOLDER in "$SOURCE_DIR/fonts"/*; do
        if [[ -d "$FONT_FOLDER" ]]; then
            FONT_NAME="$(basename "$FONT_FOLDER")"
            TARGET_DIR="$FONTS_DIR/$FONT_NAME"

            cp -r "$FONT_FOLDER" "$TARGET_DIR"
        fi
    done

    fc-cache -f
echo "Done!"

check_recommendations "vim" "xclip" "bat" "glow"

echo
echo "All done! Go ahead and make a good use of your OS."
